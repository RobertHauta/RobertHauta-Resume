name: Deploy to QA

on:
  push:
    branches: [qa]

jobs:
  deploy-qa:
    name: Deploy QA Environment
    runs-on: ubuntu-latest
    environment: qa

    steps:
      - uses: actions/checkout@v4

      - name: Set lowercase repository owner
        id: repo
        run: echo "owner_lc=${GITHUB_REPOSITORY_OWNER,,}" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.backend
          push: true
          tags: |
            ghcr.io/${{ steps.repo.outputs.owner_lc }}/resume-backend:qa
            ghcr.io/${{ steps.repo.outputs.owner_lc }}/resume-backend:qa-${{ github.sha }}
          cache-from: type=registry,ref=ghcr.io/${{ steps.repo.outputs.owner_lc }}/resume-backend:qa
          cache-to: type=inline

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.frontend
          push: true
          tags: |
            ghcr.io/${{ steps.repo.outputs.owner_lc }}/resume-frontend:qa
            ghcr.io/${{ steps.repo.outputs.owner_lc }}/resume-frontend:qa-${{ github.sha }}
          cache-from: type=registry,ref=ghcr.io/${{ steps.repo.outputs.owner_lc }}/resume-frontend:qa
          cache-to: type=inline

      - name: Create environment file for backend
        run: |
          cat << EOF > .env.backend.qa
          MONGODB_URL=${{ secrets.QA_MONGODB_URL }}
          MONGODB_DB_NAME=${{ vars.QA_MONGODB_DB_NAME }}
          SECRET_KEY=${{ secrets.QA_SECRET_KEY }}
          ALGORITHM=${{ vars.ALGORITHM }}
          ACCESS_TOKEN_EXPIRE_MINUTES=${{ vars.ACCESS_TOKEN_EXPIRE_MINUTES }}
          API_V1_PREFIX=${{ vars.API_V1_PREFIX }}
          PROJECT_NAME=${{ vars.QA_PROJECT_NAME }}
          BACKEND_CORS_ORIGINS=${{ vars.QA_CORS_ORIGINS }}
          EOF

      - name: Deploy to QA server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.QA_HOST }}
          username: ${{ secrets.QA_USERNAME }}
          key: ${{ secrets.QA_SSH_KEY }}
          script: |
            cd /opt/resume-app

            # Create backend environment file
            cat << 'EOF' > docker/.env.backend.qa
            MONGODB_URL=${{ secrets.QA_MONGODB_URL }}
            MONGODB_DB_NAME=${{ vars.QA_MONGODB_DB_NAME }}
            SECRET_KEY=${{ secrets.QA_SECRET_KEY }}
            ALGORITHM=${{ vars.ALGORITHM }}
            ACCESS_TOKEN_EXPIRE_MINUTES=${{ vars.ACCESS_TOKEN_EXPIRE_MINUTES }}
            API_V1_PREFIX=${{ vars.API_V1_PREFIX }}
            PROJECT_NAME=${{ vars.QA_PROJECT_NAME }}
            BACKEND_CORS_ORIGINS=${{ vars.QA_CORS_ORIGINS }}
            EOF

            # Set GitHub container registry credentials
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Pull and restart services
            cd docker
            docker compose -f docker-compose.qa.yml pull
            docker compose -f docker-compose.qa.yml up -d
            docker system prune -af

      - name: Health check
        run: |
          sleep 30
          curl -f https://qa.roberthauta.com/health || exit 1